using System.Collections.Generic;
using Items;
using Singletons;
using UnityEngine;

namespace DailyUpdates.Components
{
    public class DailyItemGeneration : MonoBehaviour
    {
        public static DailyItemGeneration Instance { get; private set; }
        
        // for each day, store each robot that collected items that day and what items it collected
        private readonly Dictionary<int, Dictionary<Robot, ItemsWithQuantity>> _dailyRobotCollection = new();

        private void Awake()
        {
            if (Instance != null && Instance != this)
                Destroy(gameObject);
            else
                Instance = this;
            DontDestroyOnLoad(gameObject);
        }

        /// <summary>
        /// Record that a robot collected a certain item on the current day.
        /// </summary>
        public void Record(Robot robot, Item item, int quantity)
        {
            var day = GameTime.Instance.Day();
            if (!_dailyRobotCollection.ContainsKey(day))
                _dailyRobotCollection[day] = new();
            if (!_dailyRobotCollection[day].ContainsKey(robot))
                _dailyRobotCollection[day][robot] = new();
            _dailyRobotCollection[day][robot].AddItem(item, quantity);
        }

        public string ItemGenerationDaySummary()
        {
            if (Player.Instance.inventory.GetRobotsInInventory().TotalQuantity() == 0)
                return "You have no robots! Craft some to generate resources.";

            var day = GameTime.Instance.Day() - 1;
            if (!_dailyRobotCollection.ContainsKey(day))
                return "No resources generated today!";
            
            string summary = "Resources Generated by Robots:\n";

            foreach (var (robot, itemsCollected) in _dailyRobotCollection[day])
            {
                summary += "Your " + robot.Name + "(s) generated ";
                foreach (var (item, quantity) in itemsCollected.AsDictionary())
                    summary += quantity + " " + item.Name + ", ";
                summary = summary.Remove(summary.Length - 2);
                summary += "\n";
            }
            
            return summary;
        }
    }
}
